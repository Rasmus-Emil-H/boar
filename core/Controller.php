<?php

/*******************************
 * Bootstrap Controller 
 * AUTHOR: RE_WEB
 * @package app\core\Controller
*/

namespace app\core;

use \app\core\middlewares\Middleware;
use app\core\exceptions\NotFoundException;

class Controller {

    public string $DEFAULT_METHOD = 'index';

    /**
     * @var string $currentAction
    */

    public string $action = '';

    /**
     * @var array Variable data generated by extending controllers.
    */

    protected $data = [];

    /*
     * Default layout
    */

    public string $layout = 'main';

    /*
     * Support for additional controller logic, partials
    */

    protected array $children = [];

    /**
     * Set data in current controller
     * @return void
    */

    public function setData(array $data): void {
        $this->data = $data;
    }
    
    /**
     * Array of middleware classes
     * @var app\core\middlewares\Middleware[]
    */

    protected array $middlewares = [];

    /*
     * Set child data with corresponding controller/method
    */

    protected function setChildData(array $childControllers) {
        foreach ( $childControllers as $childController ) {
            $controllerAndMethod = preg_match('/:/', $childController) ? explode(':', $childController) : [$childController, $this->DEFAULT_METHOD];
            $childController = '\\app\controllers\\'.$controllerAndMethod[0];
            if (!class_exists($childController)) throw new NotFoundException('Invalid controller');
            if (!method_exists($childController, $controllerAndMethod[1])) throw new NotFoundException('Invalid method');
            (new $childController())->{$controllerAndMethod[1]}();
        }
    }

    /**
     * Get names of children controllers
     * @return array
    */

    public function getChildren() : array {
        return $this->children;
    }

    public function render(string $view, array $params = []) {
        echo Application::$app->view->renderView($view, $params);
    }

    public function setLayout(string $layout) {
        $this->layout = $layout;
    }

    public function registerMiddleware(Middleware $middleware) {
        $this->middlewares[] = $middleware;
    }   

    public function getMiddlewares(): array {
        return $this->middlewares;
    }

}